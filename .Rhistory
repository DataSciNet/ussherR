ggplotly(linegraph,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n","Season"))
count_united <- count_united %>%
filter(n>2) %>%
filter(n<500) %>%
filter(!is.na(Season))
usshplot<-ggplot(count_united,aes(YearBCAD,Season,color=Season,size=n,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_point(shape = 4,alpha=1)+
xlab("Year BC or AD")+ylab("Season of Bigram Appearance")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
library(plotly)
ggplotly(usshplot,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n"))
linegraph <-ggplot(count_united,aes(YearBCAD,n,group=bigram,color=Season,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_line()+
geom_point(shape = 1,alpha=1)+
xlab("Year BC or AD")+ylab("Number of Bigram Appearances in Entire Chronology")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
ggplotly(linegraph,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n","Season"))
count_united <- count_united %>%
filter(n>2) %>%
filter(n<500) %>%
filter(!is.na(Season))
usshplot<-ggplot(count_united,aes(YearBCAD,Season,color=Epoch,size=n,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_point(shape = 4,alpha=1)+
xlab("Year BC or AD")+ylab("Season of Bigram Appearance")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
library(plotly)
ggplotly(usshplot,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n"))
count_united <- count_united %>%
filter(n>0) %>%
filter(n<500) %>%
filter(!is.na(Season))
usshplot<-ggplot(count_united,aes(YearBCAD,Season,color=Epoch,size=n,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_point(shape = 4,alpha=1)+
xlab("Year BC or AD")+ylab("Season of Bigram Appearance")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
library(plotly)
ggplotly(usshplot,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n"))
linegraph <-ggplot(count_united,aes(YearBCAD,n,group=bigram,color=Season,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_line()+
geom_point(shape = 1,alpha=1)+
xlab("Year BC or AD")+ylab("Number of Bigram Appearances in Entire Chronology")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
ggplotly(linegraph,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n","Season"))
word_cors <- ussher_index_words %>%
group_by(word) %>%
filter(n() >= 10) %>%
pairwise_cor(word, Index, sort = TRUE) %>%
ungroup()
word_cors
word_cors %>%
filter(item1 == "god")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)      # data manipulation & plotting
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
library(naniar)
library(reshape2)         # For the `acast` command used with comparison.cloud.
library(sentimentr)       # Text analysis package.
library(wordcloud)        # For `wordcloud` and `comparison.cloud`.
library(LiblineaR)        # Provides the `LiblineaR` svm command.
library(topicmodels)      # Text clustering commands.
library(caret)            # Used the the `confusionMatrix` command.
library(igraph)           # To make the bigram graphs.
library(ggraph)           # To plot the bigram graphs.
library(quanteda)         # Text analysis packages. Used to make DFM.
library(Matrix)           # Need to convert from a Matrix sparse matrix class.
library(SparseM)          # Need to convert to a SparseM matrix class.
library(FactoMineR)
library(factoextra)
library(dplyr)
library(viridis)
library(gridExtra)
library(widyr)
library(ussher)
ussher
ussh.ind <- ussher
tidy_annals <- ussh.ind %>%
unnest_tokens(word, EventTxt)
tidy_annals[!(!is.na(tidy_annals$word) & tidy_annals$word=="" & tidy_annals$word==" "& tidy_annals$word=="   "), ]
tidy_annals
tail(tidy_annals)
ussher_bigrams <- ussh.ind %>%
unnest_tokens(bigram, EventTxt, token = "ngrams", n = 2)
ussher_bigrams
bigrams_separated <- ussher_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts:
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigram_counts
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigrams_united
count_united <- bigrams_united %>%
add_count(bigram)
count_united
ussher_trigrams <- ussh.ind %>%
unnest_tokens(trigram, EventTxt, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
ussher_trigrams
bigrams_filtered %>%
filter(word2 == "son") %>%
count(Epoch, word1, sort = FALSE)
bigram_tf_idf <- bigrams_united %>%
count(Epoch, bigram) %>%
bind_tf_idf(bigram, Epoch, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
library(forcats)
bigram_tf_idf %>%
group_by(Epoch) %>%
slice_max(tf_idf, n = 5) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = Epoch)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Epoch, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = NULL)
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
library(textdata)
AFINN <- get_sentiments("afinn")
AFINN
not_words <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE)
not_words
library(ggplot2)
not_words %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes((n * value)*-1, word2, fill = n * value < 0)) +
geom_col(show.legend = FALSE) +
labs(x = "Sentiment value * number of occurrences",
y = "Words preceded by \"not\"")
ussher_index_words <- ussh.ind %>%
filter(Epoch == "1st Age") %>%
filter(Index > 0) %>%
unnest_tokens(word, EventTxt) %>%
filter(!word %in% stop_words$word)
ussher_index_words
word_pairs <- ussher_index_words %>%
pairwise_count(word, Index, sort = TRUE)
word_pairs
word_pairs %>%
filter(item1 == "adam")
word_cors <- ussher_index_words %>%
group_by(word) %>%
filter(n() >= 10) %>%
pairwise_cor(word, Index, sort = TRUE) %>%
ungroup()
word_cors
word_cors %>%
filter(item1 == "god")
library(ggcorrplot)
# Computing correlation matrix
correlation_matrix <- xtabs(correlation~., word_cors)
# Visualizing the correlation matrix using
# square and circle methods
ggcorrplot(correlation_matrix, method ="square")
ggcorrplot(correlation_matrix, method ="circle")
annals.count <- tidy_annals %>%
anti_join(stop_words) %>%
count(Epoch, word, sort = TRUE)
epochs_dtm <- annals.count %>%
cast_dtm(Epoch, word,n)
annals.count
epochs_lda <- LDA(epochs_dtm, k = 10, control = list(seed = 1234))
epochs_lda
epochs_topics <- tidy(epochs_lda, matrix = "beta")
epochs_topics
top_terms <- epochs_topics %>%
group_by(topic) %>%
slice_max(beta, n = 5) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
epoch_gamma <- tidy(epochs_lda, matrix = "gamma")
epoch_gamma
epoch_gamma %>%
mutate(title = reorder(document, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot() +
facet_wrap(~ document) +
labs(x = "topic", y = expression(gamma))
epoch_classifications <- epoch_gamma %>%
group_by(document) %>%
slice_max(gamma) %>%
ungroup()
epoch_classifications
epoch_topics <- epoch_classifications %>%
count(document, topic) %>%
group_by(document) %>%
slice_max(n, n = 1) %>%
ungroup() %>%
transmute(consensus = document, topic)
epoch_classifications %>%
inner_join(epoch_topics, by = "topic") %>%
filter(document != consensus)
library(scales)
assignments <- augment(epochs_lda, data = epochs_dtm)
assignments
assignments <- assignments %>%
inner_join(epoch_topics, by = c(".topic" = "topic"))
assignments
assignments %>%
count(document, consensus, wt = count) %>%
mutate(across(c(document, consensus), ~str_wrap(., 20))) %>%
group_by(document) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(consensus, document, fill = percent)) +
geom_tile() +
scale_fill_gradient2(high = "darkred", label = percent_format()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
panel.grid = element_blank()) +
labs(x = "Epoch words were assigned to",
y = "Epoch words came from",
fill = "% of assignments")
count_united <- count_united %>%
filter(n>0) %>%
filter(n<500) %>%
filter(!is.na(Season))
usshplot<-ggplot(count_united,aes(YearBCAD,Season,color=Epoch,size=n,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_point(shape = 4,alpha=1)+
xlab("Year BC or AD")+ylab("Season of Bigram Appearance")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
library(plotly)
ggplotly(usshplot,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n"))
linegraph <-ggplot(count_united,aes(YearBCAD,n,group=bigram,color=Season,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_line()+
geom_point(shape = 1,alpha=1)+
xlab("Year BC or AD")+ylab("Number of Bigram Appearances in Entire Chronology")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
ggplotly(linegraph,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n","Season"))
count_united <- count_united %>%
filter(n>2) %>%
filter(n<500) %>%
filter(!is.na(Season))
usshplot<-ggplot(count_united,aes(YearBCAD,Season,color=Epoch,size=n,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_point(shape = 4,alpha=1)+
xlab("Year BC or AD")+ylab("Season of Bigram Appearance")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
library(plotly)
ggplotly(usshplot,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n"))
linegraph <-ggplot(count_united,aes(YearBCAD,n,group=bigram,color=Season,bigram=bigram,Epoch=Epoch,AnnoMund=AnnoMund))+
geom_line()+
geom_point(shape = 1,alpha=1)+
xlab("Year BC or AD")+ylab("Number of Bigram Appearances in Entire Chronology")+ ggtitle("Bigram Distribution by Season")+
labs(color="Season")
ggplotly(linegraph,tooltip= c("bigram","YearBCAD","Epoch","AnnoMund","n","Season"))
??ussher
?ussher
quarto
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
ussher
runApp('~/RStudio Files/UssherShiny/usshapp.R')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='datascinet', token='7C76E637CA62A4CFE342D259D7EAC04B', secret='rfhO3BmOBdHmTmcyS/lbZal63SUO/5oWHcfXvivs')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
rsconnect::appDependencies()
rsconnect::appDependencies(ussher)
rsconnect::appDependencies()
runApp('~/RStudio Files/UssherShiny/usshapp.R')
rsconnect::appDependencies()
rsconnect::appDependencies()
renv
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
R CMD check
devtools::release()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::release()
news(package = "ussher")
usethis::use_news_md
usethis::use_news_md
usethis::use_news_md()
# Check for CRAN specific requirements using rhub and save it in the results
# objects
results <- rhub::check_for_cran()
# Get the summary of your results
results$cran_summary()
results$cran_summary()
devtools::check(document=FALSE)
devtools::check(document=FALSE)
#' @keywords internal
#' @aliases testduplicate-package
"_PACKAGE"
# The following block is used by usethis to automatically manage
# roxygen namespace tags. Modify with care!
## usethis namespace: start
## usethis namespace: end
NULL
@keywords internal
'@keywords internal'
ussher
library(ussher)
ussher
devtools::release ()
use_cran_comments(open = rlang::is_interactive())
usethis::use_cran_comments(open = rlang::is_interactive())
devtools::release()
library(shiny); runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
runApp('~/RStudio Files/UssherShiny/usshapp.R')
devtools::release()
devtools::check_win_devel()
devtools::release()
load("~/RStudio Files/packageussh/ussherR/data/ussher.rda")
ussher
@example ussher
example
example ussher
example ussher
#' @examples usshraw
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
source("~/RStudio Files/packageussh/ussherR/R/usshfull.R")
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
roxygen2::load_source()
devtools::release()
R CMD check.options()
rcmdcheck::rcmdcheck()
source("~/RStudio Files/packageussh/ussherR/R/usshfull.R")
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
rcmdcheck::rcmdcheck()
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
rcmdcheck::rcmdcheck()
#' \describe{
#'   \item{Index}{dbl The indexed number of Ussher's paragraphs, in ascending chronological order, added by later editors.}
#'   \item{EventTxt}{chr Ussher's original historical paragraph, cleaned for text processing}
#'   \item{YearBCAD}{dbl Harmonized year BC or AD proposed by Ussher. BC is a negative number. AD is positive.}
#'   \item{Epoch}{chr denoting which of the 7 ancient "Ages of the World" the event falls into}
#'   \item{BibBk1}{chr a Biblical Book reference, if one is included in the paragraph}
#'   \item{AnnoMund}{dbl denoting "Anno Mundus" or age of the world from Creation, or 4004 BC}
#'   \item{Season}{chr denoting which quarter of the year - Autumn, Winter, Spring or Summer that event was calculated to occur}
#'   \item{JulPer}{dbl denoting Julian Period date. Julian Period was backdated to creation by Ussher, following its adoption by Caesar in 43 BC}
#' }
#' @source \url{https://archive.org/stream/AnnalsOfTheWorld/Annals_djvu.txt}
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
rcmdcheck::rcmdcheck()
R CMD Rd2pdf ussherR
R
rcmdcheck::rcmdcheck()
devtools::build()
devtools::build_rmd()
devtools::build_manual()
devtools::build_rmd()
devtools::build_rmd(ussherR)
devtools::build()
devtools::github_release()
devtools::github_release(DataSciNet/UssherR)
devtools::github_release(DataSciNet\UssherR)
devtools::github_release(DataSciNet/UssherR)
devtools::github_release()
devtools::run_examples()
ussher
usshraw
usshfull
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
r
devtools::build()
rcmdcheck::rcmdcheck()
sudo apt-get install texinfo
sudo apt
sudo
tools::showNonASCII()
tinytex::install_tinytex()
library(tinytex)
tinytex::reinstall_tinytex()
rcmdcheck::rcmdcheck()
tinytex::parse_packages()
tinytex::parse_install()
tinytex_root()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
rcmdcheck::rcmdcheck()
R CMD check package --no-manual
rcmdcheck::rcmdcheck(no-manual)
rcmdcheck::rcmdcheck()
devtools::build_rmd()
devtools::build_manual()
rlang::last_error()
rlang::last_trace()
rcmdcheck::rcmdcheck()
devtools::build()
devtools::build()
rlang
update rlang
library(rlang)
install.packages("rlang")
devtools::build()
devtools::check_rhub()
devtools::build_rmd()
build
build()
devtools::release()
R CMD check.options()
library(rcmdcheck)
rcmdcheck::rcmdcheck()
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
devtools::document()
source("~/RStudio Files/packageussh/ussherR/R/usshfull.R")
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
devtools::document()
devtools::build()
devtools::build_rmd()
rcmdcheck::rcmdcheck()
summary(ussher)
source("~/RStudio Files/packageussh/ussherR/R/usshraw.R")
source("~/RStudio Files/packageussh/ussherR/R/ussher.R")
source("~/RStudio Files/packageussh/ussherR/R/usshfull.R")
document()
devtools::document()
rcmdcheck::rcmdcheck()
devtools::build()
devtools::check()
devtools::release()
devtools::release()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::spell_check()
devtools::build()
devtools::check()
devtools::release()
ussher
head(ussher)
